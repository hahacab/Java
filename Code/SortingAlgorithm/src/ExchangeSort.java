/*
3 交换排序
主要是通过排序表中两个记录关键码的比较，若与排序要求相逆（不符合 升序或降序），则将两者交换。
 */

public class ExchangeSort {
    //冒泡排序
    public static void bubbleSort(int[] arr) {
/*
冒泡排序的基本思想：通过对待排序序列从前向后，依次比较相邻元素的排序码，若发现逆序则交换，
使排序码较大的元素逐渐从前部移向后部。 因为排序的过程中，各元素不断接近自己的位置，如果一趟比较下来没有进
行过交换，就说明序列有序，因此要在排序过程中设置一个标志swap判断元素是 否进行过交换。从而减少不必要的比

从冒泡排序的算法可以看出，若待排序的元素为
正序，则只需进行一趟排序，比较次数为（n-1）次 ，移动元素次数为0；若待排序的元素为逆序，则需 进行n-1趟排序，比较次数为(n2-n)/2，移动次数为 3(n2-n )/2，因此冒泡排序算法的时间复杂度为O（ n2）。由于其中的元素移动较多，所以属于内排序 中速度较慢的一种。
因为冒泡排序算法只进行元素间的顺序移动， 所以是一个稳定的算法。
 */
        int i, j, swap, length;
        length = arr.length;
        swap = 0;
        for (i = 0; i < length - 1; i++) {//进行length-1 次从前到后交换顺序
            for (j = 0; j < length - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    swap++;
                    int tmp = arr[j + 1];
                    arr[j + 1] = arr[j];
                    arr[j] = tmp;
                }
            }
            if (swap == 0) break;//若swap==0,则数组已经排列好了，跳出循环
        }
    }

}
